# Inventory Data Processor

Small command-line utility for Week 1 project: validates inventory CSV rows using Pydantic and generates a low-stock report.

## Features
- Reads `inventory.csv` (columns: `product_id,product_name,quantity,price`)
- Validates rows with Pydantic (`quantity >= 0`, `price > 0`)
- Logs invalid rows/errors to `errors.log`
- Produces `low_stock_report.txt` for products with `quantity < threshold`  
- Docstrings, type hints, and SRP-based functions
- Example CSV and usage instructions included

## Requirements
- Python 3.9+
- Install dependencies:
```bash









### 🧠 Concepts Used
- CSV file handling (`csv` module)
- Validation with `Pydantic`
- Exception handling (`try/except`)
- Logging invalid rows
- Type hinting & docstrings
- Single Responsibility Principle (SRP)

---

## 🧱 Week 2 — Object-Oriented Inventory Management Package

### 🎯 Objective
Refactor the Week 1 script into a **modular OOP-based package** with:
- Encapsulation, Inheritance, and Polymorphism
- Open/Closed Principle (OCP)
- Factory & Singleton Design Patterns
- Generators for efficient file reading

### 📁 Project Structure
























python -m venv .venv
source .venv/bin/activate        # macOS / Linux
.venv\Scripts\activate           # Windows
pip install -r requirements.txt

'''
# 🧮 Inventory Data Processor

A command-line Python tool that reads inventory data from a CSV file, validates it using **Pydantic**, logs invalid rows, and generates a **Low Stock Report**.

---

## 🚀 Features
- Reads inventory data from `inventory.csv`
- Validates fields using **Pydantic** (quantity ≥ 0, price > 0)
- Logs invalid rows to `errors.log`
- Generates `low_stock_report.txt` for items below threshold (default < 10)
- Includes detailed docstrings, type hints, and clean modular code

---

## 🧰 Setup Instructions

### 1️⃣ Clone the repository
```bash
git clone https://github.com/praveenvayugundla-max/inventory-data-processor.git
cd inventory-data-processor

'''